// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String
  phone         String?
  avatar        String?
  role          UserRole  @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  addresses     Address[]
  orders        Order[]
  reviews       Review[]
  wishlist      MenuItem[] @relation("Wishlist") // Many-to-many relation
  notifications Notification[]
}

enum UserRole {
  ADMIN
  CUSTOMER
}

// Address Management
model Address {
  id        String     @id @default(cuid())
  type      AddressType
  street    String
  city      String
  state     String
  zipCode   String
  isDefault Boolean    @default(false)
  label     String?

  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  orders    Order[]

  @@index([userId])
}

enum AddressType {
  HOME
  WORK
  OTHER
}

// Menu Management
model MenuItem {
  id           String    @id @default(cuid())
  name         String    @unique
  description  String
  price        Decimal   @db.Decimal(10, 2)
  image        String
  category     Category  @relation(fields: [categoryId], references: [id])
  categoryId   String
  isVegetarian Boolean   @default(false)
  spicyLevel   Int       @default(0)
  isTrending   Boolean   @default(false)
  status       ItemStatus @default(ACTIVE)
  dietaryType  DietaryType @default(NON_VEGETARIAN)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  orderItems   OrderItem[]
  reviews      Review[]
  wishedBy     User[] @relation("Wishlist") // Many-to-many relation
  
  @@index([categoryId])
}

model Category {
  id        String     @id @default(cuid())
  name      String     @unique
  items     MenuItem[]
}

enum ItemStatus {
  ACTIVE
  INACTIVE
}

enum DietaryType {
  VEGETARIAN
  NON_VEGETARIAN
}

// Order Management
model Order {
  id                String        @id @default(cuid())
  status            OrderStatus   @default(PENDING)
  total             Decimal       @db.Decimal(10, 2)
  paymentMethod     PaymentMethod
  createdAt         DateTime      @default(now())
  estimatedDelivery DateTime

  // Relations
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  address           Address       @relation(fields: [addressId], references: [id], onDelete: Cascade)
  addressId         String
  items             OrderItem[]
  revocationReason  String?

  @@index([userId])
  @@index([addressId])
}

model OrderItem {
  id         String   @id @default(cuid())
  quantity   Int
  price      Decimal  @db.Decimal(10, 2)

  // Relations
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId    String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId String

  @@index([orderId])
  @@index([menuItemId])
}

enum OrderStatus {
  PENDING
  PREPARING
  ON_THE_WAY
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CARD
  CASH
}

// Review System
model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  menuItem  MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  menuItemId String

  @@index([userId])
  @@index([menuItemId])
}

// Notification System
model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType
  status    NotificationStatus @default(UNREAD)
  createdAt DateTime         @default(now())

  // Relations
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@index([userId])
}

enum NotificationType {
  ORDER
  PROMO
  INFO
}

enum NotificationStatus {
  READ
  UNREAD
}

// Analytics (for admin dashboard)
model Analytics {
  id            String   @id @default(cuid())
  totalRevenue  Decimal  @db.Decimal(10, 2)
  totalOrders   Int
  totalUsers    Int
  date          DateTime @default(now())

  // Additional metrics
  peakHourOrders Json?    // Store hourly order counts
  userDemographics Json?  // Store age group distributions
  popularItems    Json?   // Store top-selling items data
}
