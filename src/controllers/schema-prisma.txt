generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id @default(uuid())
  name           String
  email          String     @unique
  password       String
  phoneNumber    String?
  profilePicture String?
  isAdmin        Boolean    @default(false)
  addresses      Address[]
  orders         Order[]
  reviews        Review[]
  favorites      Favorite[]
  cartItems      CartItem[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  @@map("users")
}

model Address {
  id        String   @id @default(uuid())
  userId    String
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("addresses")
}

model Product {
  id          String           @id @default(uuid())
  name        String
  description String?
  categoryId  String
  category    Category         @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  variants    ProductVariant[]
  reviews     Review[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@map("products")
}

model Category {
  id        String    @id @default(uuid())
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("categories")
}

model ProductVariant {
  id         String      @id @default(uuid())
  productId  String
  name       String
  price      Decimal     @default(0.0)
  stock      Int         @default(0)
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  favorites  Favorite[]
  cartItems  CartItem[]
  orderItems OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@unique([productId, name])
  @@map("product_variants")
}

model CartItem {
  id               String         @id @default(uuid())
  userId           String
  productVariantId String
  quantity         Int            @default(1)
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@unique([userId, productVariantId]) // A user can only have one cart item per product variant
  @@map("cart_items")
}

model Order {
  id         String      @id @default(uuid())
  userId     String
  addressId  String
  totalPrice Decimal     @default(0.0)
  status     OrderStatus @default(PENDING)
  orderItems OrderItem[]
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  address    Address     @relation(fields: [addressId], references: [id])
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@map("orders")
}

model OrderItem {
  id               String         @id @default(uuid())
  orderId          String
  productVariantId String
  quantity         Int            @default(1)
  priceAtPurchase  Decimal        @default(0.0) // Store price at the time of order
  order            Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@map("order_items")
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  productId String
  rating    Int      @default(5)
  comment   String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId]) // Each user can review a product only once
  @@map("reviews")
}

model Favorite {
  userId           String
  productVariantId String
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  createdAt        DateTime       @default(now())

  @@id([userId, productVariantId]) // Composite primary key
  @@map("favorites")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  DELIVERING
  DELIVERED
  CANCELLED
}
